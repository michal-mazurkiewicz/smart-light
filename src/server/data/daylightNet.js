let sensorOneIlluminance = []
let sensorTwoIlluminance = []
let totalIlluminance = []
let averages = []
let startValue = 0.05
let value;
       // Drzwi
let sensorOnePointers = [
    0.0492, 0.0474, 0.0457, 0.0439, 0.0474,
    0.0555, 0.0519, 0.0501, 0.0474, 0.0528,
    0.0743, 0.0689, 0.0698, 0.0627, 0.0662,
    0.0842, 0.0859, 0.0842, 0.0779, 0.0788,
    0.1253, 0.1262, 0.1182, 0.1119, 0.1092,
    0.1513, 0.1585, 0.1603, 0.1477, 0.1316,
    0.1952, 0.2122, 0.2175, 0.2032, 0.1746,
    0.2856, 0.4002, 0.4351, 0.4154, 0.2963,
    0.2927, 0.5568, 0.6312, 0.6267, 0.3688,
    0.0000, 0.9042, 1.0000, 0.9794, 0.0000
]
        //Okno

        //Sciana
let sensorTwoPointers = [
    0.0527, 0.0483, 0.0518, 0.0527, 0.0518,
    0.0563, 0.0536, 0.0563, 0.0590, 0.0590,
    0.0679, 0.0634, 0.0697, 0.0724, 0.0715,
    0.0804, 0.0769, 0.0822, 0.0822, 0.0867,
    0.1117, 0.1117, 0.1215, 0.1233, 0.1224,
    0.1412, 0.1421, 0.1528, 0.1626, 0.1546,
    0.1635, 0.1975, 0.2252, 0.2082, 0.1984,
    0.2788, 0.4155, 0.4379, 0.3986, 0.3029,
    0.3485, 0.6148, 0.6434, 0.5809, 0.2985,
    0.0000, 0.9768, 1.0000, 0.9258, 0.0000,
]



  let IlluminanceArray = [
    [],[
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      291.5, 494.5, 470.3, 365.2, 470.3,
      272.4, 460.9, 422, 361.4, 422,
      240.3, 440.5, 430.1, 352.5, 430.1,
      251.6, 450.3, 424.3, 324.5, 424.3,
      234.7, 331.4, 390.8, 246.5, 390.8,
      205.8, 361.7, 346.8, 190.8, 346.8,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      291.5, 494.5, 470.3, 365.2, 470.3,
      272.4, 460.9, 422, 361.4, 422,
      240.3, 440.5, 430.1, 352.5, 430.1,
      251.6, 450.3, 424.3, 324.5, 424.3,
      234.7, 331.4, 390.8, 246.5, 390.8,
      205.8, 361.7, 346.8, 190.8, 346.8,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
    ],[
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      291.5, 494.5, 470.3, 365.2, 470.3,
      272.4, 460.9, 422, 361.4, 422,
      240.3, 440.5, 430.1, 352.5, 430.1,
      251.6, 450.3, 424.3, 324.5, 424.3,
      234.7, 331.4, 390.8, 246.5, 390.8,
      205.8, 361.7, 346.8, 190.8, 346.8,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      291.5, 494.5, 470.3, 365.2, 470.3,
      272.4, 460.9, 422, 361.4, 422,
      240.3, 440.5, 430.1, 352.5, 430.1,
      251.6, 450.3, 424.3, 324.5, 424.3,
      234.7, 331.4, 390.8, 246.5, 390.8,
      205.8, 361.7, 346.8, 190.8, 346.8,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
    ],[
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      291.5, 494.5, 470.3, 365.2, 470.3,
      272.4, 460.9, 422, 361.4, 422,
      240.3, 440.5, 430.1, 352.5, 430.1,
      251.6, 450.3, 424.3, 324.5, 424.3,
      234.7, 331.4, 390.8, 246.5, 390.8,
      205.8, 361.7, 346.8, 190.8, 346.8,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      291.5, 494.5, 470.3, 365.2, 470.3,
      272.4, 460.9, 422, 361.4, 422,
      240.3, 440.5, 430.1, 352.5, 430.1,
      251.6, 450.3, 424.3, 324.5, 424.3,
      234.7, 331.4, 390.8, 246.5, 390.8,
      205.8, 361.7, 346.8, 190.8, 346.8,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
    ],[
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      291.5, 494.5, 470.3, 365.2, 470.3,
      272.4, 460.9, 422, 361.4, 422,
      240.3, 440.5, 430.1, 352.5, 430.1,
      251.6, 450.3, 424.3, 324.5, 424.3,
      234.7, 331.4, 390.8, 246.5, 390.8,
      205.8, 361.7, 346.8, 190.8, 346.8,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      291.5, 494.5, 470.3, 365.2, 470.3,
      272.4, 460.9, 422, 361.4, 422,
      240.3, 440.5, 430.1, 352.5, 430.1,
      251.6, 450.3, 424.3, 324.5, 424.3,
      234.7, 331.4, 390.8, 246.5, 390.8,
      205.8, 361.7, 346.8, 190.8, 346.8,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
    ],[
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      291.5, 494.5, 470.3, 365.2, 470.3,
      272.4, 460.9, 422, 361.4, 422,
      240.3, 440.5, 430.1, 352.5, 430.1,
      251.6, 450.3, 424.3, 324.5, 424.3,
      234.7, 331.4, 390.8, 246.5, 390.8,
      205.8, 361.7, 346.8, 190.8, 346.8,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      291.5, 494.5, 470.3, 365.2, 470.3,
      272.4, 460.9, 422, 361.4, 422,
      240.3, 440.5, 430.1, 352.5, 430.1,
      251.6, 450.3, 424.3, 324.5, 424.3,
      234.7, 331.4, 390.8, 246.5, 390.8,
      205.8, 361.7, 346.8, 190.8, 346.8,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
    ],[
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      291.5, 494.5, 470.3, 365.2, 470.3,
      272.4, 460.9, 422, 361.4, 422,
      240.3, 440.5, 430.1, 352.5, 430.1,
      251.6, 450.3, 424.3, 324.5, 424.3,
      234.7, 331.4, 390.8, 246.5, 390.8,
      205.8, 361.7, 346.8, 190.8, 346.8,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      291.5, 494.5, 470.3, 365.2, 470.3,
      272.4, 460.9, 422, 361.4, 422,
      240.3, 440.5, 430.1, 352.5, 430.1,
      251.6, 450.3, 424.3, 324.5, 424.3,
      234.7, 331.4, 390.8, 246.5, 390.8,
      205.8, 361.7, 346.8, 190.8, 346.8,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
    ],[
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      291.5, 494.5, 470.3, 365.2, 470.3,
      272.4, 460.9, 422, 361.4, 422,
      240.3, 440.5, 430.1, 352.5, 430.1,
      251.6, 450.3, 424.3, 324.5, 424.3,
      234.7, 331.4, 390.8, 246.5, 390.8,
      205.8, 361.7, 346.8, 190.8, 346.8,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      291.5, 494.5, 470.3, 365.2, 470.3,
      272.4, 460.9, 422, 361.4, 422,
      240.3, 440.5, 430.1, 352.5, 430.1,
      251.6, 450.3, 424.3, 324.5, 424.3,
      234.7, 331.4, 390.8, 246.5, 390.8,
      205.8, 361.7, 346.8, 190.8, 346.8,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
    ],[
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      291.5, 494.5, 470.3, 365.2, 470.3,
      272.4, 460.9, 422, 361.4, 422,
      240.3, 440.5, 430.1, 352.5, 430.1,
      251.6, 450.3, 424.3, 324.5, 424.3,
      234.7, 331.4, 390.8, 246.5, 390.8,
      205.8, 361.7, 346.8, 190.8, 346.8,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
      291.5, 494.5, 470.3, 365.2, 470.3,
      272.4, 460.9, 422, 361.4, 422,
      240.3, 440.5, 430.1, 352.5, 430.1,
      251.6, 450.3, 424.3, 324.5, 424.3,
      234.7, 331.4, 390.8, 246.5, 390.8,
      205.8, 361.7, 346.8, 190.8, 346.8,
      223.7, 327, 372.8, 300.6, 372.8,
      280, 458.8, 423, 354.2, 423,
    ]]



        //Okno
 const setSensorOneIlluminance = (data) => {sensorOneIlluminance = sensorOnePointers.map(p => p * data)};
 const setSensorTwoIlluminance = (data) => {sensorTwoIlluminance = sensorTwoPointers.map(p => p * data)};

const mergeIlluminanceArrays = () => {
  let mergedArray = [];
  for(let i = 0; i < sensorOneIlluminance.length; i+=5){
   mergedArray.push(sensorOneIlluminance.slice(i,i+5).concat(sensorTwoIlluminance.slice(i, i+5)))
}
IlluminanceArray[0] = mergedArray.reduce((p, c) => p.concat(c))
}

const setLightIlluminance = (lightIndex, value) => {IlluminanceArray[lightIndex] = IlluminanceArray[lightIndex].map(l => l * value)}

const setLightsIlluminance = () => {
  for(let i = 1; i < IlluminanceArray.length; i++){
    setLightIlluminance(i, value)
  }
  console.log("Illuminance: ", IlluminanceArray)
}

const getTotalIlluminance = () => {
  totalIlluminance = IlluminanceArray.reduce((r, a) => a.map((b, i) => (r[i] || 0) + b), []);
  console.log("TOTAL: ", totalIlluminance)
}

const getUnderLightAverages = () => {averages = [
  [...totalIlluminance.slice(0, 5), ...totalIlluminance.slice(10, 15), ...totalIlluminance.slice(20, 25)].reduce((p,c) => p + c) / 10,
  [...totalIlluminance.slice(5, 10), ...totalIlluminance.slice(15, 20), ...totalIlluminance.slice(25, 30)].reduce((p,c) => p + c) / 10,
  [...totalIlluminance.slice(30, 35), ...totalIlluminance.slice(40, 45)].reduce((p,c) => p + c) / 10,
  [...totalIlluminance.slice(35, 40), ...totalIlluminance.slice(45, 50)].reduce((p,c) => p + c) / 10,
  [...totalIlluminance.slice(50, 55), ...totalIlluminance.slice(60, 65)].reduce((p,c) => p + c) / 10,
  [...totalIlluminance.slice(55, 60), ...totalIlluminance.slice(65, 70)].reduce((p,c) => p + c) / 10,
  [...totalIlluminance.slice(70, 75), ...totalIlluminance.slice(80, 85), ...totalIlluminance.slice(90, 95)].reduce((p,c) => p + c) / 10,
  [...totalIlluminance.slice(75, 80), ...totalIlluminance.slice(85, 90), ...totalIlluminance.slice(95,100)].reduce((p,c) => p + c) / 10
]}

const calculateIlluminance = () => {
  let t1 = performance.now()

  setSensorOneIlluminance(1200);
  setSensorTwoIlluminance(1100);
  mergeIlluminanceArrays();
  setLightsIlluminance();
  getTotalIlluminance();
  getUnderLightAverages();
  let t2 = performance.now()
  console.log("Time to execute: " + (t2 - t1) + " ms")
}

const test = () => {
  value = startValue;
  for(let i = 1; i < 50; i++){
    calculateIlluminance();
    value = startValue * i;
  }
}


//Wartość z czujnika,
//GET: natężenie swiatła dziennego -- DONE.
//
//GET: natężenie oświetlenia sztucznego na podstawie nastaw opraw
//Suma natężeń sztucznego i dziennego
//Podział na siatkę opraw
//GET: średnie natężenie dla każdej oprawy
//Kontroler PID
//Get: Nowe nastawy

/**
 * 321.7, 426.7, 492.6, 415.9, 492.6, 426.7, 321.7,
    390.8, 593.6, 560.7, 491.1, 560.7, 593.6, 390.8,
    412, 641.3, 618, 512.6, 618, 641.3, 412,
    395.2, 607.6, 566.4, 509.5, 566.4, 607.6, 395.2,
    360.3, 583.4, 573.8, 496, 573.8, 583.4, 360.3,
    363.3, 585.9, 560.5, 450.6, 560.5, 585.9, 363.3,
    340.9, 454.7, 513.5, 351.9, 513.5, 454.7, 340.9,
    292.6, 453.9, 456.6, 283.3, 456.6, 453.9, 292.6
 */
//Repeat.

